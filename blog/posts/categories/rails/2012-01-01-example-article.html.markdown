---
title: Rails для начинающих
date: 2015-01-01
---

Rails для начинающих
Это руководство раскрывает установку и запуск Ruby on Rails.

```После его прочтения, вы узнаете:```

Как установить Rails, создать новое приложение на Rails и присоединить ваше приложение к базе данных.
Общую структуру приложения на Rails.
Основные принципы MVC (Model, View Controller - «Модель-представление-контроллер») и дизайна, основанного на RESTful.
Как быстро создать изначальный код приложения на Rails.
1. Допущения в этом руководстве
Это руководство рассчита  но на новичков, которые хотят запустить приложение на Rails с нуля. Оно не предполагает, что вы раньше работали с Rails. Однако, чтобы полноценно им воспользоваться, необходимо предварительно установить:

Язык Ruby версии 2.2.2 или новее
Правильную версию Development Kit, если вы используете Windows
Систему пакетов RubyGems, которая устанавливается вместе с Ruby версий 1.9 и выше. Чтобы подробнее узнать о RubyGems, прочитайте RubyGems Guides.
Установленную базу данных SQLite3
Rails – фреймворк для веб-разработки, написанный на языке программирования Ruby. Если у вас нет опыта в Ruby, возможно вам будет тяжело сразу приступить к изучению Rails. Есть несколько хороших англоязычных ресурсов, посвященных изучению Ruby, например:

Официальный сайт языка пр ограммирования Ruby
Список reSRC бесплатных книг по программированию
Обращайте внимание, что некоторые ресурсы, хотя все еще великолепные, но все же покрывают старые версии Ruby, такие как 1.6, и в особенности 1.8, и не включает некоторые элементы синтаксиса, которые вы увидите в повседневной разработке на Rails.

2. Что такое Rails?
Rails - фреймворк для веб-разработки, написанный на языке программирования Ruby. Он разработан, чтобы сделать программирование веб-приложений проще, так как использует ряд допущений о том, что нужно каждому разработчику для создания нового проекта. Он позволяет вам писать меньше кода в процессе программирования, в сравнении с другими языками и фреймворками. Профессиональные разработчики на Rails также отмечают, что с ним разработка веб-приложений более забавна =)

Rails - своевольный программный продукт. Он делает предположение, что имеется "лучший" способ что-то сделать, и он так разработан, что стимулирует этот способ - а в некоторых случаях даже препятствует альтернативам. Если изучите "The Rails Way", то, возможно, откроете в себе значительное увеличение производительности. Если будете упорствовать и переносить старые привычки с других языков в разработку на Rails, и попытаетесь использовать шаблоны, изученные где-то еще, ваш опыт разработки будет менее счастливым.

Философия Rails включает два важных ведущих принципов:

Don't Repeat Yourself: DRY — это принцип разработки ПО, который гласит, что "Каждый кусочек информации должен иметь единственное, неизбыточное, Every piece of knowledge must have a single, unambiguous, авторитетное представление в системе." Не пишите одну и ту же информацию снова и снова, код будет легче поддерживать, и он будет более расширяемым и менее ошибочным..
Convention Over Configuration: — у Rails есть мнения о наилучших способах делать множество вещей в веб приложении, и по умолчанию выставлены эти соглашения, вместо того, чтобы заставлять вас по мелочам править многочисленные конфигурационные файлы.
3. Создание нового проекта Rails
Лучший способ использования этого руководства - проходить каждый шаг и смотреть, что получится, пропустите код или шаг и учебное приложение не заработает, поэтому следует буквально все делать шаг за шагом.

Следуя этому руководству, вы создадите проект Rails с названием blog, очень простой веб-блог. Прежде чем начнем создавать приложение, нужно убедиться, что сам Rails установлен.

Нижеследующие примеры используют $ для обозначения строки ввода терминала в UNIX-подобных операционных системах, хотя у вас он может быть настроен по другому Если вы используете Windows, ваша строка будет выглядеть наподобие c:\source_code>

3.1. Установка Rails

Откройте приложения для командной строки. На Mac OS X откройте Terminal.app, на Windows выберите "Run" в меню Start и напишите 'cmd.exe'. Любые команды, начинающиеся со знака доллара $ должны быть запущены в командной строке. Убедитесь, что у вас установлена текущая версия Ruby:

Существует ряд инструментов для помощи в быстрой установке Ruby и Ruby on Rails в вашей системе. Пользователи Windows могут использовать Rails Installer, а пользователи Mac OS X могут использовать Tokaido. Больше методов для установки для большинства операционных систем можно увидеть на ruby-lang.org.

$ ruby -v
ruby 2.2.2p95
Многие популярные UNIX-подобные ОС поставляются с приемлемой версией SQLite3. На Windows, если вы устанавливали Rails с помощью Rails Installer, у вас уже установлен SQLite. Прочие пользователи могут обратиться к инструкциям по установке на сайте SQLite3. Проверьте, что он корректно установлен и содержится в вашем PATH:

$ sqlite3 --version
Программа должна сообщить свою версию.

Для установки Rails используйте команду gem install, представленную RubyGems:

$ gem install rails
Чтобы проверить, что все установлено верно, нужно выполнить следующее:

$ rails --version
Если выводится что-то вроде "Rails 5.0.0", можно продолжать.

3.2. Создание приложения Blog

Rails поставляется с рядом скриптов, названных генераторами, разработанных для облегчения жизни разработчика, создавая все, что необходимо для начала работы над определенной задачей. Одним из них является генератор нового приложения, предоставляющий вам основу приложения Rails, таким образом, вам не нужно писать его самим.

Для использования этого генератора, откройте терминал, войдите в папку, в которой у вас есть права на создание файлов и напишите:

$ rails new blog
Это создаст приложение на Rails с именем Blog в директории blog и установит гемы, зависимости от которых упомянуты в Gemfile при использовании bundle install.

Можно посмотреть все возможные опции командной строки, которые принимает билдер приложения на Rails, запустив rails new -h.

После того, как вы создали приложение blog, перейдите в его папку:

$ cd blog
В директории blog имеется несколько автоматически созданных файлов и папок, задающих структуру приложения на Rails. Большая часть работы в этом самоучителе будет происходить в папке app, но сейчас пробежимся по функциям каждой папки, которые создает Rails в новом приложении по умолчанию:

Файл/Папка	Назначение
app/	Содержит контроллеры, модели, вьюхи, хелперы, рассыльщики и ресурсы вашего приложения. Мы рассмотрим эту папку подробнее далее.
bin/	Содержит Rails скрипты которые стартуют ваше приложение, также директория может содержать другие скрипты которые вы используете для настройки, деплоя или запуска.
config/	Конфигурации маршрутов, базы данных вашего приложения, и т.д. Более подробно это раскрыто в Конфигурирование приложений на Rails
config.ru	Конфигурация Rack для серверов, основанных на Rack, используемых для запуска приложения.
db/	Содержит текущую схему вашей базы данных, а также миграции базы данных.
Gemfile
Gemfile.lock	Эти файлы позволяют указать, какие зависимости от гемов нужны для вашего приложения на Rails. Эти файлы используются гемом Bundler. Подробнее о Bundler смотрите на сайте Bundler
lib/	Внешние модули для вашего приложения.
log/	Файлы логов приложения.
public/	Единственная папка, которая доступна извне как есть. Содержит статичные файлы и скомпилированные ресурсы.
Rakefile	Этот файл содержит набор команд, которые могут быть запущены в командной строке. Определения команд производятся во всех компонентах Rails. Вместо изменения Rakefile, вы можете добавить свои собственные задачи, добавив файлы в директорию lib/tasks вашего приложения.
README.rdoc	Это вводный мануал для вашего приложения. Его следует отредактировать, чтобы рассказать остальным, что ваше приложение делает, как его настроить, и т.п.
test/	Юнит-тесты, фикстуры и прочий аппарат тестирования. Это раскрывается в руководстве Тестирование приложений на Rails
tmp/	Временные файлы (такие как файлы кэша и pid)
vendor/	Место для кода внешних разработчиков. В типичном приложении на Rails, включает внешние гемы.
4. Hello, Rails!
Для начала, давайте выведем на экран какой-либо текст. Для этого нужен запущенный сервер вашего приложения на Rails.

4.1. Запуск веб-сервера

Фактически у вас уже есть функциональное приложение на Rails. Чтобы убедиться, нужно запустить веб-сервер на вашей машине. Это можно осуществить, запустив следующую команду из директории blog:

$ bin/rails server
Если вы используете Windows, вы должны передавать скрипты из папки bin непосредственно в интерпретатор Ruby, то есть ruby bin\rails server.

Компилирование CoffeeScript и сжатие файлов JavaScript требует JavaScript runtime в вашей системе, и его отсутствие приведет к ошибке execjs во время компиляции. Обычно Mac OS X и Windows поставляются с установленным JavaScript runtime. Rails добавляет гем therubyracer в генерируемый Gemfile нового приложения в закомментированной строке, если нужно, можете ее раскомментировать. therubyrhino - рекомендованный runtime для пользователей JRuby, он добавляется в Gemfile, если приложение создаётся под JRuby. Можно узнать все о поддерживаемых runtime-ах в ExecJS

Это запустит WEBrick, веб-сервер, распространяющийся с Ruby по умолчанию. Чтобы увидеть приложение в действии, откройте окно браузера и пройдите по адресу http://localhost:3000. Вы должны увидеть дефолтную информационную страницу Rails:

скриншот Welcome Aboard

Для остановки веб-сервера нажмите Ctrl+C в терминале, где он запущен. Чтобы убедиться в том, что сервер был остановлен, вы должны снова увидеть курсор командной строки. Для большинства UNIX-подобных систем, включая Mac OS X, это будет знак доллара $. В режиме development, Rails в основном не требует остановки сервера; все изменения, которые Вы делаете в файлах, автоматически подхватываются сервером.

Страница "Welcome Aboard" это своеобразный тест для нового приложения на Rails: она показывает, что ваши программы настроены достаточно правильно для отображения страницы. Также можете нажать по ссылке About your application’s environment чтобы увидеть сводку о среде вашего приложения.

4.2. Скажите "привет", Рельсы

Чтобы Rails сказал "Привет", нужно создать, как минимум, контроллер и вьюху.

Назначением контроллера является получение определенных запросов к приложению. Роутинг решает, какой контроллер получит какие запросы. Часто имеется более одного маршрута к каждому контроллеру, и различные маршруты могут быть обработаны различными экшнами. Назначением каждого экшна является сбор информации для предоставления ее во вьюху.

Назначением вьюхи (представления) является отображение этой информации в удобочитаемом формате. Необходимо отметить важное различие, что местом, в котором собирается информация, является контроллер, а не вьюха. Вьюха должна только лишь отображать эту информацию. По умолчанию шаблоны вьюх пишутся на языке, названном eRuby (Embedded Ruby), который конвертируется циклом запросов в Rails до отправки пользователю.

Для создания нового контроллера, нужно запустить генератор "controller" и сказать ему, что вы хотите контроллер с именем "welcome" с экшном по имени "index", вот так:

$ bin/rails generate controller welcome index
Rails создаст несколько файлов и маршрут.

create  app/controllers/welcome_controller.rb
 route  get 'welcome/index'
invoke  erb
create    app/views/welcome
create    app/views/welcome/index.html.erb
invoke  helper
create    app/helpers/welcome_helper.rb
invoke    test_unit
create      test/helpers/welcome_helper_test.rb
invoke  assets
invoke    coffee
create      app/assets/javascripts/welcome.coffee
invoke    scss
create      app/assets/stylesheets/welcome.scss
Наиболее важными из них являются, разумеется, контроллер, расположенный в app/controllers/welcome_controller.rb, и вьюха, расположенная в app/views/welcome/index.html.erb.

Откройте файл app/views/welcome/index.html.erb в текстовом редакторе. Удалите весь существующий в файле код и замените его на следующую единственную строчку кода:

<h1>Hello, Rails!</h1>
4.3. Настройка домашней страницы приложения

Теперь, когда мы сделали контроллер и вьюху, нужно сказать Rails, что мы хотим увидеть "Hello Rails!". В нашем случае мы хотим это увидеть, когда зайдем в корневой URL нашего сайта, http://localhost:3000. Однако сейчас это место заняла тестовая страница "Welcome Aboard".

Чтобы это исправить, удалите файл index.html, расположенный в директории public приложения, если таковой имеется.

Так нужно сделать, так как Rails отдаст любой статичный файл из директории public, соответствующий маршруту, предпочтя его любому динамическому содержимому, создаваемому из контроллеров. Файл index.html особенный: он будет отдан, если запрос придет в корневой маршрут, т.е. http://localhost:3000. Если произойдет другой запрос, такой как http://localhost:3000/welcome, будет отдан файл public/welcome.html, но только если он существует.

Теперь нужно сказать Rails, где находится настоящая домашняя страница.

Откройте файл config/routes.rb в редакторе.

Rails.application.routes.draw do
  get 'welcome/index'

  # The priority is based upon order of creation:
  # first created -> highest priority.
  # See how all your routes lay out with "rake routes".
  #
  # You can have the root of your site routed with "root"
  # root 'welcome#index'
  #
  # ...
Это маршрутный файл вашего приложения, который содержит варианты входа на сайт на специальном языке DSL (domain-specific language, предметно-ориентированный язык программирования), который говорит Rails, как соединять входящие запросы с контроллерами и экшнами. Этот файл содержит много закомментированных строк с примерами, и один из них фактически показывает, как соединить корень сайта с определенным контроллером и экшном. Найдите строку, начинающуюся с root и раскомментируйте ее. Должно получится следующее: